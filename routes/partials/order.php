<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Validator;
use \App\Models\ShippingInfo;
use \App\AlertHelper;
use Stripe\Exception\ApiErrorException;
use PayPal\Api\Capture;
use PayPal\Api\Refund;
use PayPal\Api\RefundRequest;

Route::post('/checkout-setup', [App\Http\Controllers\OrderController::class, 'setup'])->name('checkout-setup');

Route::get('/checkout', [App\Http\Controllers\OrderController::class, 'checkout'])->name('checkout');

Route::get('/orders', function() {
    $tab = 0;
    if(\request('tab')) $tab = \request('tab');
    return view('orders')->with('tab', $tab);
})->name('orders');

Route::post('/print-return-label', function() {
    $order_id = request('order');

    if(! \App\Models\Order::where('id', $order_id)->exists()) {
        AlertHelper::alertWarning('Could not find that order.');
        return redirect('/orders?tab=0');
    }

    $order = \App\Models\Order::where('id', $order_id)->first();

    if($order->return_tracking_number == null) {
        // purchaseLabel(true) => true for return label
        $label_data = $order->purchaseLabel(true);
        $order->return_tracking_number = $label_data['tracking_number'];
        $order->return_label_url = $label_data['label_url'];
        $order->save();

        $shipped_notification = \App\Models\Notification::create([
            'user_id' => $order->seller_id,
            'handler' => '\App\NotificationHandlers\ShippedNotification',
            'metadata' => [
                'order_id' => $order->id
            ]
        ]);

        event(new \App\Events\NewNotification($shipped_notification));
    }

   return redirect($order->return_label_url);
})->name('print-return-label');

Route::post('/dispute-order', function() {
    $order_id = request('order');

    if(! \App\Models\Order::where('id', $order_id)->exists()) {
        AlertHelper::alertWarning('Could not find that order.');
        return redirect('/orders?tab=0');
    }

    $order = \App\Models\Order::where('id', $order_id)->first();
})->name('dispute-order');

Route::post('/refund-order', function() {
    $order_id = request('order');

    if(! \App\Models\Order::where('id', $order_id)->exists()) {
        AlertHelper::alertWarning('Could not find that order.');
        return redirect('/seller-tools?tab=1');
    }

    $order = \App\Models\Order::where('id', $order_id)->first();

    if($order->refunded) {
        AlertHelper::alertWarning('Order has already been refunded.');
        return redirect('/seller-tools?tab=1');
    }

    if($order->refund_cutoff <= \Carbon\Carbon::now()) {
        AlertHelper::alertWarning('Order can no longer be refunded.');
        return redirect('/seller-tools?tab=1');
    }

    if(! $order->captured) {
        AlertHelper::alertWarning('Order has not been captured yet.');
        return redirect('/seller-tools?tab=1');
    }

    if($order->paid_out) {
        AlertHelper::alertWarning('Order can no longer be refunded.');
        return redirect('/seller-tools?tab=1');
    }

    try {
        $apiContext = \App\PayPalHelper::getApiContext();
        $capture = Capture::get($order->paypal_capture_id, $apiContext);
        $refundRequest = new RefundRequest();
        $amount = $order->cost_item;
        if($order->label_url !== null) {
            $amount = $amount - $order->cost_shipping;
        }
        $refundRequest->setAmount($amount);
        $captureRefund = $capture->refundCapturedPayment($refundRequest, $apiContext);
        $order->refunded = true;
        $order->save();
        AlertHelper::alertSuccess('Order refunded!');
    } catch (\Exception $e) {
        AlertHelper::alertWarning('Something went wrong.');
        \Log::error($e);
    }

    return redirect('/seller-tools?tab=1');
})->name('refund-order');

Route::post('/mark-order-returned', function() {
    $order_id = request('order');

    if(! \App\Models\Order::where('id', $order_id)->exists()) {
        AlertHelper::alertWarning('Could not find that order.');
        return redirect('/seller-tools?tab=3');
    }

    $order = \App\Models\Order::where('id', $order_id)->first();

    if($order->return_tracking_number == null) {
        AlertHelper::alertWarning('Shipping label has not been generated by the seller.');
        return redirect('/orders?tab=0');
    }

    if(\App\Models\Product::where('id', $order->product_id)->exists()) {
        $product = \App\Models\Product::where('id', $order->product_id)->first();
        $product->active = true;
        $product->save();
    }

    $order->returned = true;
    $order->save();
    AlertHelper::alertSuccess('Order marked as returned.');
    return redirect('/seller-tools?tab=3');
})->name('mark-order-returned');

Route::post('/mark-order-delivered', function() {
    $order_id = request('order');

    if(! \App\Models\Order::where('id', $order_id)->exists()) {
        AlertHelper::alertWarning('Could not find that order.');
        return redirect('/orders?tab=0');
    }

    $order = \App\Models\Order::where('id', $order_id)->first();

    if($order->tracking_number == null) {
        AlertHelper::alertWarning('Shipping label has not been generated by the seller.');
        return redirect('/orders?tab=0');
    }

    $order->delivered = true;
    $order->save();
    AlertHelper::alertSuccess('Order marked as delivered.');
    return redirect('/orders?tab=0');
})->name('mark-order-returned');
